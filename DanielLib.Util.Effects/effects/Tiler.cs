//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace Daniellib.Util.Effects
{
	
	/// <summary>Pixel shader tiles the image across multiple rows and columns</summary>
	public class Tiler : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(Tiler), 0);
		public static readonly DependencyProperty VerticalTileCountProperty = DependencyProperty.Register("VerticalTileCount", typeof(double), typeof(Tiler), new UIPropertyMetadata(((double)(4D)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty HorizontalTileCountProperty = DependencyProperty.Register("HorizontalTileCount", typeof(double), typeof(Tiler), new UIPropertyMetadata(((double)(3D)), PixelShaderConstantCallback(2)));
		public static readonly DependencyProperty HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", typeof(double), typeof(Tiler), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(3)));
		public static readonly DependencyProperty VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", typeof(double), typeof(Tiler), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(4)));
		public Tiler() {
			PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/Daniellib.Util.Effects;component/effects/ps/Tiler.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(VerticalTileCountProperty);
			this.UpdateShaderValue(HorizontalTileCountProperty);
			this.UpdateShaderValue(HorizontalOffsetProperty);
			this.UpdateShaderValue(VerticalOffsetProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>The number of verical tiles to add to the output. The higher the value the more tiles.</summary>
		public double VerticalTileCount {
			get {
				return ((double)(this.GetValue(VerticalTileCountProperty)));
			}
			set {
				this.SetValue(VerticalTileCountProperty, value);
			}
		}
		/// <summary>The number of horizontal tiles to add to the output. The higher the value the more tiles.</summary>
		public double HorizontalTileCount {
			get {
				return ((double)(this.GetValue(HorizontalTileCountProperty)));
			}
			set {
				this.SetValue(HorizontalTileCountProperty, value);
			}
		}
		/// <summary>Change the horizontal offset of each tile.</summary>
		public double HorizontalOffset {
			get {
				return ((double)(this.GetValue(HorizontalOffsetProperty)));
			}
			set {
				this.SetValue(HorizontalOffsetProperty, value);
			}
		}
		/// <summary>Change the vertical offset of each tile.</summary>
		public double VerticalOffset {
			get {
				return ((double)(this.GetValue(VerticalOffsetProperty)));
			}
			set {
				this.SetValue(VerticalOffsetProperty, value);
			}
		}
	}
}
