//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace Daniellib.Util.Effects
{
	
	/// <summary>An effect mimics the look of glass tiles.</summary>
	public class GlassTileEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(GlassTileEffect), 0);
		public static readonly DependencyProperty TilesProperty = DependencyProperty.Register("Tiles", typeof(double), typeof(GlassTileEffect), new UIPropertyMetadata(((double)(5D)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty BevelWidthProperty = DependencyProperty.Register("BevelWidth", typeof(double), typeof(GlassTileEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty OffsetProperty = DependencyProperty.Register("Offset", typeof(double), typeof(GlassTileEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(3)));
		public static readonly DependencyProperty GroutColorProperty = DependencyProperty.Register("GroutColor", typeof(Color), typeof(GlassTileEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 0, 0), PixelShaderConstantCallback(2)));
		public GlassTileEffect() {
			PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/Daniellib.Util.Effects;component/effects/ps/GlassTiles.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(TilesProperty);
			this.UpdateShaderValue(BevelWidthProperty);
			this.UpdateShaderValue(OffsetProperty);
			this.UpdateShaderValue(GroutColorProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>The approximate number of tiles per row/column.</summary>
		public double Tiles {
			get {
				return ((double)(this.GetValue(TilesProperty)));
			}
			set {
				this.SetValue(TilesProperty, value);
			}
		}
		public double BevelWidth {
			get {
				return ((double)(this.GetValue(BevelWidthProperty)));
			}
			set {
				this.SetValue(BevelWidthProperty, value);
			}
		}
		public double Offset {
			get {
				return ((double)(this.GetValue(OffsetProperty)));
			}
			set {
				this.SetValue(OffsetProperty, value);
			}
		}
		public Color GroutColor {
			get {
				return ((Color)(this.GetValue(GroutColorProperty)));
			}
			set {
				this.SetValue(GroutColorProperty, value);
			}
		}
	}
}
